Inteligent, ă Artificială: Tema 1 – Orar
Seria CD
Andrei Olaru, Cătălin-Mihail Chiru, Andrei Dugăes, escu,
Vlad-Constantin Lungu-Stan, Andrei Mihalea
Ultima modificare: 5 aprilie 2024

1

Descrierea problemei

Bazându-vă pe cunos, tint, ele dobândite în cadrul cursurilor s, i laboratoarelor de IA,
sarcina voastră este să implementat, i o solut, ie în limbajul de programare Python
pentru generarea automată a unui orar fără conflicte / cu un număr cât mai mic de
conflicte, pe structura oralelor cu care v-at, i întâlnit pe parcursul anilor de facultate.
Problema modelează programarea unor activităt, i de tip laborator/seminar, având
următoarele elemente:
• Un slot din orar ocupă 120 de minute (e.g. 8-10) s, i există 6 sloturi într-o zi de
lucru (de la 8 la 20) (except, ie primul caz de test)
• Orele se t, in de Luni până Vineri (except, ie primul caz de test)
• Există un număr limitat de săli în care se pot desfăs, ura orele. Fiecare sală are
o capacitate maximă de student, i s, i este repartizată specific pentru anumite
materii.
• Fiecare materie din orar are un număr specific de student, i pentru care trebuie
să se aloce săli.
– Exemplu:
Avem o materie X cu 90 de student, i s, i 2 săli disponibile:
sala A cu 50 de locuri disponibile
sala B cu 20 de locuri disponibile
Sunt acoperiri valide pentru materia X atât:
2 intervale diferite în sala A (2 ∗ 50 = 100 ≥ 90)
1 interval în sala A s, i 2 intervale în sala B (1 ∗ 50 + 2 ∗ 20 = 90 ≥ 90)
• Există un număr limitat de profesori, fiecare specializat în anumite materii
la care pot preda ore. Fiecare profesor are propriile preferint, e referitoare la
pozit, ionarea orelor sale.
• Profesori diferit, i pot preda aceeas, i materie în săli diferite în acelas, i interval
orar.
1

Există două tipuri de constrângeri pe care trebuie să le avem în vedere pentru a
genera un orar valid: cele implicite / hard s, i cele încălcabile / soft.

1.1

Constrângeri implicite / hard

Constrângerile hard sunt de ordin fizic sau logistic, s, i, o dată încălcate, produc
orare imposibil de urmat:
• într-un interval orar s, i într-o sala se poate sust, ine o singură materie de către
un singur profesor.
• într-un interval orar, un profesor poate t, ine o singură materie, într-o singură
sală.
• un profesor poate t, ine ore în maxim 7 intervale pe săptămână.
• o sală permite într-un interval orar prezent, a unui număr de student, i mai mic
sau egal decât capacitatea ei maximă specificată.
• tot, i student, ii de la o materie trebuie să aibă alocate ore la acea materie.
Concret, suma capacităt, ilor sălilor peste toate intervalele în care se t, in ore la
materia respectivă trebuie să fie mai mare sau egală decât numărul de student, i
la materia respectivă. (vezi Exemplu mai sus)
• tot, i profesorii predau doar materiile pe care sunt specializat, i.
• în toate sălile se t, in ore doar la materiile pentru care este repartizată sala.

1.2

Constrângeri încălcabile / soft

Constrângerile soft se referă la preferint, ele profesorilor. Este preferabil să încălcăm
constrângeri soft dacă acest lucru va genera un orar valid, decât să ajungem în
imposibilitatea de a completa orarul.
Constrângerile profesorilor pot fi de următoarele tipuri:
• Preferă anumite zile sau nu doresc să predea într-o zi anume.
– Exemplu:
Luni → profesorul preferă să predea Luni
!Mart, i → profesorul preferă să nu predea mart, i
• Preferă sau nu doresc anumite intervale orare, în oricare din zile
– Exemplu:
8-12 → profesorul preferă să predea în oricare dintre intervalele 8-10 sau
10-12
!14-20 → profesorul preferă să nu predea în intervalele 14-16, 16-18, 18-20
• [bonus] Preferă să nu aibă ferestre în orar mai mari de X ore
– Exemplu:
!Pauză > 0 → profesorul nu dores, te nicio pauză în orarul său
!Pauza > 2 → profesorul nu vrea ferestre mai mari de 2 ore
2

ATENT, IE!
Preferint, ele personale ale profesorilor sunt mereu exhaustive, s, tiind pentru
fiecare zi sau interval orar părerea fiecărui profesor fat, ă de ele.

2

Intrare s, i ies, ire

Pentru a vă ajuta cu parsarea datelor de intrare, intrările vă sunt date în format
YAML.
Hint
Folosit, i biblioteca yaml pentru parsarea fis, ierelor de intrare.
Vom analiza structura fis, ierului dummy.yaml, pentru a detalia formatul de intrare
(notă: dummy.yaml are un set redus de zile s, i intervale, pentru o rezolvare mai
rapidă):
1
2
3
4
5
6
7
8

9
10
11
12

Intervale:
- (8, 10)
- (10, 12)
- (12, 14)
Zile:
- Luni
- Marti
- Miercuri
Materii:
DS: 100
IA: 75
MS: 100

// număr student, i pentru materia DS

Figura 1: Prima parte din fis, ierul de intrare
Avem următoarele sect, iuni
• În chenarul albastru (Figura 1), dict, ionarele ’Zile’ s, i ’Intervale’ cont, in totalitatea zilelor s, i intervalelor care pot apărea în orar.
• În chenarul portocaliu (Figura 1), dict, ionarul ’Materii’ cont, ine maparea materiilor pe care le avem de acoperit în orar cu numărul de student, i alocat, i la
aceste materii.
• În chenarul turcoaz (Figura 2), sunt ordonat, i lexicografic profesorii, după prenume. Dict, ionarul ’Profesori’ cont, ine după cheia cu numele fiecărui profesor
două intrări: una cu constrângerile profesorului respectiv s, i una cu materiile
pe care le poate preda
3

13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36

37
38
39
40
41
42
43
44
45
46

Profesori:
Andreea Dinu:
Constrangeri:
- Luni
// preferă Luni s, i Mart, i
- Marti
- '!Miercuri'
// preferă să nu predea Miercuri
- '!8-10'
// nu preferă intervalele 8-10, 12-14
- '!12-14'
- 10-12
Materii:
- DS
// poate preda DS s, i IA
- IA
Cristina Dumitrescu:
Constrangeri:
- '!Luni'
- Marti
- '!Miercuri'
- '!10-12'
- 8-10
- 12-14
Materii:
- MS
- DS
...
Sali:
EG324:
Capacitate: 25
Materii:
- MS
- IA
EG390:
Capacitate: 25
Materii:
- DS
Figura 2: A doua parte din fis, ierul de intrare
• În chenarul verde (Figura 2), dict, ionarul ’Săli’ cont, ine după cheia cu numele
fiecărei săli două intrări: Capacitea sălii - cât, i student, i intră într-un interval
în acea sală, s, i Materiile care pot fi t, inute în sala respectivă

Outputul fiecărui algoritm este o atribuire de profesori s, i materii la săli s, i intervale din fiecare zi. Un exemplu de solut, ie pentru intrarea dummy.yaml este în Figura
3. (output produs cu funct, ia de pretty printing din utils.py).
4

|Interval |
Luni
|
Marti
|
Miercuri
|
-------------------------------------------------------------------------------------------| 8 - 10 |
DS : (EG390 - EG)
|
EG390 - liber
|
DS : (EG390 - EG)
|
|
|
MS : (EG324 - RG)
|
MS : (EG324 - CD)
|
EG324 - liber
|
-------------------------------------------------------------------------------------------| 10 - 12 |
DS : (EG390 - AD)
|
EG390 - liber
|
EG390 - liber
|
|
EG324 - liber
|
IA : (EG324 - AD)
|
IA : (EG324 - PF)
|
-------------------------------------------------------------------------------------------| 12 - 14 |
EG390 - liber
|
DS : (EG390 - CD)
|
EG390 - liber
|
|
|
IA : (EG324 - PF)
|
MS : (EG324 - RG)
|
MS : (EG324 - RG)
|
--------------------------------------------------------------------------------------------

Figura 3: Solut, ia pentru intrarea dummy.

2.1

Cazuri de test

Vom folosi următoarele cazuri de test:
• dummy.yaml cont, ine o problemă simplă, cu doar 3 zile s, i 3 intervale orare în
fiecare zi, pentru a vă oferi un mediu de testare fail-fast în implementare.
• orar_mic_exact, orar_mediu_relaxat s, i orar_mare_relaxat suportă solut, ii
care nu încalcă nicio constrângere (au cost 0); nis, te posibile solut, ii sunt în
directorul output.
• orar_constrâns_încălcat verifică faptul că rezolvarea suportă solut, ii care
încalcă constrângerile; în outputs/orar_constrans_incalcat.txt se găses, te
o solut, ie de cost 1.
• orar_bonus_exact introduce constrângerile de tip "!Pauză > X" s, i suportă o
solut, ie de cost 0, în outputs/orar_bonus.txt.

3

Cerint, e

Vet, i avea de implementat 2 algoritmi dintre cei implementat, i la laborator, pentru
problema orarului, s, i va trebui să comparat, i performant, a lor. Concret, trebuie să
realizat, i:
1. reprezentarea unei stări / a unei solut, ii part, iale pentru problemă (10 puncte).
2. reprezentarea implicită sau explicită a restrict, iilor din problemă (10 puncte).
3. rezolvarea problemei folosind un algoritm de tip A* (30 puncte).
4. rezolvarea problemei folosind un algoritm de tip CSP (30 puncte).
5. un document PDF în care să detaliat, i (20 puncte):
• reprezentarea stărilor s, i a restrict, iilor;
• optimizări pe care le-at, i realizat pentru cei doi algoritmi, fat, ă de varianta
de la laborator, specifice acestei probleme;
5

• comparat, ia între cei doi algoritmi din punct de vedere al următorilor
indicatori:
– timp de execut, ie;
– număr de stări construite;
– calitate a solut, iei (număr de restrict, ii încălcate).
[bonus] pentru bonus, suportat, i restrict, ii legate de intervalul de pauză pentru profesori

(20 puncte).

Notă: chiar dacă nu reus, it, i să obt, inet, i solut, ii de cost 0 pentru toate cazurile de
test, realizat, i comparat, ia s, i explicat, i la prezentare motivele pentru care credet, i că
algoritmii implementat, i de voi produc anumite outputuri.
ATENT, IE
Tema este individuală! Toate solut, iile trimise vor fi verificate, folosind o
unealtă pentru detectarea plagiatului.
ATENT, IE
Este important să vă concentrat, i pe reprezentarea problemei s, i modelarea sa
în subprobleme, algoritmii nefiind conceptual diferit, i fat, ă de implementările
din laborator, o dată ce avet, i problema exprimată în seturi de variabile s, i
valori, sau stări s, i tranzit, ii de stări.

4

Trimiterea temei

Tema se trimite ca o arhivă .zip care cont, ine cel put, in 2 fis, iere:
• un fis, ier Python orar.py sau Jupyter Notebook orar.ipynb care cont, ine
implementarea algoritmilor:
– pentru fis, ierele Python, programul va primi ca argumente în linia de
comandă algoritmul (astar sau csp) s, i fis, ierul de intrare. Programul va
afis, a solut, ia la output (pretty-printed).
– pentru fis, ierele Jupyter Notebook, fis, ierul va cont, ine rularea s, i rezultatele
pentru ambii algoritmi cerut, i s, i pentru toate cazurile de test care apar în
analiza comparativă.
• un fis, ier PDF care prezintă elementele cerute la cerint, a 5.

5

Hints

În fis, ierul utils.py avet, i câteva funct, ii ajutătoare pentru
• citirea fis, ierelor YAML;
6

• pretty printing pentru un orar.
Indicii generale:
General Hints
• Pentru slicing eficient, lucrat, i cu array-uri din numpy. Din experient, a
noastră, implementări folosind biblioteca pandas suferă de overhead din
punct de vedere al complexităt, ii temporale.
• Încercat, i să folosit, i mecanisme de copiere a stării cu care suntet, i familiari
din laboratoare, nu scriet, i lucruri "de mână", C-like. Fiind o problemă
de recursivitate într-un spat, iu foarte mare, orice procesare suplimentară
sau orice îmbunătăt, ire se fac simt, ite imediat în timpul as, teptat la rulare.
• Rulat, i întâi pe testele mici (dummy, mic s, i mediu) pentru a evita pierderea de timp.
• Dacă algoritmii vos, tri nu obt, in solut, ii de cost 0, nu facet, i overfitting pe
testele noastre, concentrat, i-vă să avet, i implementarea / implementările
funct, ionale s, i explicat, i în analiza comparativă de ce credet, i că nu obt, inet, i
cost 0.
• Încercat, i să folosit, i euristici duc la producerea solut, iilor invalide în cât
mai put, in pas, i (fail-fast): Ex. Acoperim întâi materia cu cel mai mic
număr de student, i, cu cei mai put, ini profesori, sau cu cele mai put, ine
intervale în care pot fi predate.
• Asigurat, i-vă că vă folosit, i de constrângeri, fiindcă multe dintre ele sunt
menite să reducă spat, iul de căutare. De exemplu, nu căutat, i acoperirea
unei materii într-o sală ce nu acceptă acea materie.
• În momentul în care at, i terminat de acoperit o materie, putet, i trece
direct la altă materie.
• În momentul în care avet, i o acoperire completă, putet, i opri complet
căutarea.
Pentru algoritmii care se folosesc de exprimarea problemei ca o căutare în spat, iul
stărilor, recomandăm:
State Based Hints
• Abordat, i o manieră greedy în momentul în care vă stabilit, i euristicile.
• Cum ar putea diferi starea curentă de stările copii care derivă din ea?
• Cât de mare este spat, iul stărilor? Este tractabil să le verificat, i pe toate?
Dacă nu, cum at, i putea să le filtrat, i în as, a fel încât să explorat, i nodurile
cele mai promit, ătoare?

7

• Vă poate ajuta s, i în alte contexte condit, ia de Hill Climbing de oprire
din explorare când obt, in un cost mai mare decât best_cost?
• În situat, ii stocastice (aleatoare), completarea unui slot at, i putea să nu o
modelat, i pur aleator, ci să stabilit, i probabilităt, i de explorare în funct, ie
de potent, ialul alternativelor.
• Putet, i încerca să facet, i din preferint, e (constrângerile încălcabile)
restrict, ii hard s, i dacă nu se mai pot alege act, iuni care să le respecte,
putet, i alege mai întâi stările care încalcă cele mai put, ine preferint, e.

8

